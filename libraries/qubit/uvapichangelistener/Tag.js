//:include tagsdk-current.js
var version = "";
var classPath = "qubit.uvapichangelistener" + version;

qubit.opentag.LibraryTag.define(classPath + ".Tag", {
	config: {
		/*DATA*/
		name: "UV API - change listener",
		async: true,
		description: "Uses polling to check for changes to the UV, running callbacks when changes occur. Changes are detected on a deep level.",
		html: "<!--@SRC@--><script type=\"text/javascript\">\n\n(function() {\n\n  window._uv = window._uv || [];\n  var u = window.universal_variable = window.universal_variable || {};\n  var currentUV;\n\n  var isArray = function(input) {\n    return (Object.prototype.toString.call(input) === \"[object Array]\");\n  };\n\n  var deepEqual = function() {\n    var leftChain, rightChain;\n\n    function compare2Objects(x, y) {\n      var p;\n\n      // remember that NaN === NaN returns false\n      // and isNaN(undefined) returns true\n      if (isNaN(x) && isNaN(y) && typeof x === \"number\" && typeof y === \"number\") {\n        return true;\n      }\n\n      // Compare primitives and functions.     \n      // Check if both arguments link to the same object.\n      // Especially useful on step when comparing prototypes\n      if (x === y) {\n        return true;\n      }\n\n      // Works in case when functions are created in constructor.\n      // Comparing dates is a common scenario. Another built-ins?\n      // We can even handle functions passed across iframes\n      if ((typeof x === \"function\" && typeof y === \"function\") ||\n        (x instanceof Date && y instanceof Date) ||\n        (x instanceof RegExp && y instanceof RegExp) ||\n        (x instanceof String && y instanceof String) ||\n        (x instanceof Number && y instanceof Number)) {\n        return x.toString() === y.toString();\n      }\n\n      // At last checking prototypes as good a we can\n      if (!(x instanceof Object && y instanceof Object)) {\n        return false;\n      }\n\n      if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {\n        return false;\n      }\n\n      if (x.constructor !== y.constructor) {\n        return false;\n      }\n\n      if (x.prototype !== y.prototype) {\n        return false;\n      }\n\n      // check for infinitive linking loops\n      if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {\n        return false;\n      }\n\n      // Quick checking of one object beeing a subset of another.\n      // todo: cache the structure of arguments[0] for performance\n      for (p in y) {\n        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n          return false;\n        } else if (typeof y[p] !== typeof x[p]) {\n          return false;\n        }\n      }\n\n      for (p in x) {\n        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n          return false;\n        } else if (typeof y[p] !== typeof x[p]) {\n          return false;\n        }\n\n        switch (typeof(x[p])) {\n          case \"object\":\n          case \"function\":\n\n            leftChain.push(x);\n            rightChain.push(y);\n\n            if (!compare2Objects(x[p], y[p])) {\n              return false;\n            }\n\n            leftChain.pop();\n            rightChain.pop();\n            break;\n\n          default:\n            if (x[p] !== y[p]) {\n              return false;\n            }\n            break;\n        }\n      }\n\n      return true;\n    }\n\n    if (arguments.length < 1) {\n      return true; //Die silently? Don\"t know how to handle such case, please help...\n      // throw \"Need two or more arguments to compare\";\n    }\n\n    for (var i = 1, l = arguments.length; i < l; i++) {\n\n      leftChain = []; //todo: this can be cached\n      rightChain = [];\n\n      if (!compare2Objects(arguments[0], arguments[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var clone = function(item) {\n    if (!item) {\n      return item;\n    } // null, undefined values check\n\n    var types = [Number, String, Boolean],\n      result;\n\n    // normalizing primitives if someone did new String(\"aaa\"), or new Number(\"444\");\n    types.forEach(function(type) {\n      if (item instanceof type) {\n        result = type(item);\n      }\n    });\n\n    if (typeof result == \"undefined\") {\n      if (Object.prototype.toString.call(item) === \"[object Array]\") {\n        result = [];\n        item.forEach(function(child, index, array) {\n          result[index] = clone(child);\n        });\n      } else if (typeof item == \"object\") {\n        // testing that this is DOM\n        if (item.nodeType && typeof item.cloneNode == \"function\") {\n          result = item.cloneNode(true);\n        } else if (!item.prototype) { // check that this is a literal\n          if (item instanceof Date) {\n            result = new Date(item);\n          } else {\n            // it is an object literal\n            result = {};\n            for (var i in item) {\n              result[i] = clone(item[i]);\n            }\n          }\n        } else {\n          // depending what you would like here,\n          // just keep the reference, or create new object\n          if (false && item.constructor) {\n            // would not advice to do that, reason? Read below\n            result = new item.constructor();\n          } else {\n            result = item;\n          }\n        }\n      } else {\n        result = item;\n      }\n    }\n\n    return result;\n  };\n\n  var trigger = function(type, data) {\n    for (var i = 0; i < callbacks.length; i++) {\n      if (typeof callbacks[i].func === \"function\" && callbacks[i].type === type) {\n        callbacks[i].func(data);\n      }\n    }\n  };\n\n  // Go through all the things that have been pushed \n  // before the API has loaded\n  var processCallbacks = function() {\n    for (var i = 0; i < window._uv.length; i++) {\n      _uv.push(window._uv[i]);\n      _uv.splice(i);\n    }\n  };\n\n\n  /*** LISTENERS ***/\n\n  var callbacks = [];\n\n  var on = function(type, func) {\n    callbacks.push({\n      type: type,\n      func: func\n    });\n  };\n\n  // Poll for changes\n  var timer;\n  var wait = function() {\n    if (!callbacks.length || timer) return;\n    timer = setInterval(function() {\n      if (!deepEqual(currentUV, window.universal_variable)) {\n        trigger(\"change\", window.universal_variable);\n        currentUV = clone(window.universal_variable);\n      }\n    }, 500);\n  };\n\n  // Store a clone of the current UV\n  currentUV = clone(window.universal_variable);\n\n\n  /*** PUBLIC PUSH & GET API ***/\n\n  _uv.push = function(data) {\n    if (!isArray(data)) return;\n    if (data[0] === \"on\") {\n      on(data[1], data[2]);\n    } else if (data[0] === \"trigger\" && data[1]) {\n      trigger(data[1]);\n    }\n    wait();\n  };\n\n\n  // Process things added before the API loads\n  processCallbacks();\n\n}());\n\n</script>",
		imageUrl: "https://s3-eu-west-1.amazonaws.com/opentag-images/qubit_Q.png",
		locationDetail: "",
		isPrivate: false,
		url: "",
		usesDocWrite: false,
		parameters: [

		]
		/*~DATA*/
	},
	script: function() {
		/*SCRIPT*/
		/*~SCRIPT*/
	},
	pre: function() {
		/*PRE*/
		/*~PRE*/
	},
	post: function() {
		/*POST*/
		/*~POST*/
	}
});