//:include tagsdk-current.js

qubit.opentag.LibraryTag.define("unidays.redemptiontracking.Tag", {
	config: {
		/*DATA*/
		name: "Redemption Tracking",
		async: true,
		description: "￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼Note: Before assigning the value of the UNiDAYS Customer ID to the UNiDAYS Customer ID parameter, the value should be hashed by passing the UNiDAYS Secret Hash Key into a HMAC-SHA hashing algorithm with a block size of 128bit and a hash size of 512bit, aka HMAC-SHA-512. A good choice would be this one : https://code.google.com/p/crypto-js/#HMAC. After loading, for example, this file : http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha512.js, the Encrypted UNiDAYS Customer ID value can be created as follows : var encryptedCustomerID = CryptoJS.HmacSHA512(*unidays_customer_id_value*, *unidays_secret_hash_key_value*);. The same applies for the value of the Order ID as well as that of the Student ID (if applicable). The URLs mentioned may have expired. All of the above values will be generated by using a JS expression that returns the desired hashed value in each case.",
		html: "",
		imageUrl: "https://s3-eu-west-1.amazonaws.com/qubit-etc/opentaglogos/unidays.png",
		locationDetail: "",
		isPrivate: true,
		url: "",
		usesDocWrite: false,
		parameters: [{
			name: "UNiDAYS Customer ID",
			description: "Provided by UNiDAYS - See tag description on how to encrypt",
			token: "unidays_customer_id",
			uv: ""
		}, {
			name: "Order ID",
			description: "Order ID - See tag description on how to encrypt",
			token: "order_id",
			uv: "universal_variable.transaction.order_id"
		}, {
			name: "Student ID",
			description: "See tag description on how to encrypt - Use a blank string if not applicable",
			token: "student_id",
			uv: ""
		}, {
			name: "Order Currency",
			description: "currency",
			token: "currency",
			uv: "universal_variable.transaction.currency"
		}, {
			name: "Order Value",
			description: "Order Value",
			token: "subtotal",
			uv: "universal_variable.transaction.subtotal"
		}, {
			name: "Order Discount",
			description: "Assign a blank string if not applicable",
			token: "discount",
			uv: ""
		}, {
			name: "UNiDAYS Discount Code",
			description: "The UNiDAYS code that was used. Assign a blank string if not applicable",
			token: "unidays_discount_code",
			uv: ""
		}, {
			name: "UNiDAYS Secret Hash Key",
			description: "Provided by UNiDAYS in order to encrypt UNiDays Customer ID, Order ID & Student ID (if applicable)",
			token: "unidays_secret_hash_key",
			uv: ""
		}]
		/*~DATA*/
	},
	script: function() {
		/*SCRIPT*/

		var pms = "?CustomerId=" + this.valueForToken("unidays_customer_id") + "&";
		pms += "TransactionId=" + this.valueForToken("order_id") + "&";
		pms += "StudentId=" + this.valueForToken("student_id") + "&";
		pms += "Currency=" + this.valueForToken("currency") + "&";
		pms += "OrderTotal=" + this.valueForToken("subtotal") + "&";
		pms += "DiscountAmount=" + this.valueForToken("discount") + "&";
		pms += "Code=" + this.valueForToken("unidays_discount_code") + "&";
		pms += "Signature=" + this.valueForToken("unidays_secret_hash_key");

		(new Image()).src = document.location.protocol +
			"//tracking.myunidays.com/perks/redemption/v1.0.gif" + pms;

		/*~SCRIPT*/
	},
	pre: function() {
		/*PRE*/
		/*~PRE*/
	},
	post: function() {
		/*POST*/
		/*~POST*/
	}
});